name: Deployment
permissions:
  contents: write
on:
  pull_request:
    types:
      - labeled
    branches:    
      - production
jobs:
  merge:
    name: Merge
    runs-on: ubuntu-latest
    if: |-
      ${{ 
        contains(github.event.pull_request.labels.*.name, 'merge deployment') &&
        github.event.pull_request.state == 'open'
      }}
    steps:
      - uses: hmarr/debug-action@v2
      - uses: actions/setup-node@v3
      - run: >
          npx is-mergeable 
          --owner $GITHUB_REPOSITORY_OWNER
          --repo ${{ github.event.pull_request.base.repo.name }}
          --pull-request ${{ github.event.number }}
          --min-reviews 1
        env:
          GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Prepare git
      - name: Checkout production branch
        uses: actions/checkout@v3
        with:
          ref: production
          # Fetch deeply in order to allow merge functionality.
          fetch-depth: 0
      - name: Set Github User to github-actions
        run: >
          git config --local user.email "github-actions[bot]@users.noreply.github.com" &&
          git config --local user.name "github-actions"
      - name: Fetch staging branch
        run: git fetch --no-tags --progress --no-recurse-submodules origin staging
      
      # Merge
      - name: Merge staging into production
        id: merge
        run: git merge origin/staging --ff -m "Merge branch 'staging' into production"

      # Push changes, Github will enforce required check runs here.
      - name: Push changes
        run: git push --set-upstream origin production
      - uses: superbrothers/close-pull-request@v3
        with:
          comment: "Merged ðŸš€"

      # If anythin fails, remove the `merge deployment` label 
      - uses: actions-ecosystem/action-remove-labels@v1
        if: failure()
        with:
          labels: merge deployment